// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(CUSTOMER)
  twoFactorEnabled      Boolean   @default(false)
  twoFactorMethod       TwoFactorMethod?
  twoFactorSecret       String?
  recoveryBackupCodes   String[]
  accounts              Account[]
  sessions              Session[]
  orders                Order[]
  vendorProfile         VendorProfile?
  wallets               CryptoWallet[]
  payoutSettings        PayoutSetting[]
  commissionSettings    CommissionSetting?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model VendorProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  businessName    String
  description     String?
  contactEmail    String
  contactPhone    String?
  website         String?
  socialLinks     Json?
  bankingDetails  Json?
  verified        Boolean   @default(false)
  rating          Float?
  totalSales      Int      @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model CryptoWallet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      CryptoType
  address   String
  label     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type, address])
}

model PayoutSetting {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  type         PayoutMethod
  details      Json
  isDefault    Boolean       @default(false)
  schedule     PayoutSchedule
  minAmount    Float?
  currency     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CommissionSetting {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  baseRate        Float
  volumeDiscounts Json?
  specialRates    Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  amount            Float
  currency          String
  status            OrderStatus
  paymentMethod     PaymentMethod
  paymentId         String?
  transactionHash   String?   // For crypto transactions
  exchangeRate      Float?    // For crypto/fiat conversion
  items             OrderItem[]
  commissionAmount  Float?
  vendorPayout      Float?
  refundStatus      RefundStatus?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  quantity  Int
  price     Float
  metadata  Json?
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
  PARTNER
}

enum TwoFactorMethod {
  SMS
  EMAIL
  AUTHENTICATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RefundStatus {
  NONE
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CRYPTO
  CASH_APP
  VENMO
  APPLE_PAY
  GOOGLE_PAY
}

enum CryptoType {
  BTC
  ETH
  USDC
  USDT
  BNB
  SOL
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
  CRYPTO
  WISE
  CASH_APP
  VENMO
}

enum PayoutSchedule {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}
